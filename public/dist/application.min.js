"use strict";var ApplicationConfiguration=function(){var applicationModuleName="deepdepth",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("fieldtypes"),ApplicationConfiguration.registerModule("graphtypes"),ApplicationConfiguration.registerModule("jobtypes"),ApplicationConfiguration.registerModule("queries"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("fieldtypes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Fieldtypes","fieldtypes","dropdown","/fieldtypes(/create)?",!1,["admin"]),Menus.addSubMenuItem("topbar","fieldtypes","List Fieldtypes","fieldtypes"),Menus.addSubMenuItem("topbar","fieldtypes","New Fieldtype","fieldtypes/create")}]),angular.module("fieldtypes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listFieldtypes",{url:"/fieldtypes",templateUrl:"modules/fieldtypes/views/list-fieldtypes.client.view.html"}).state("createFieldtype",{url:"/fieldtypes/create",templateUrl:"modules/fieldtypes/views/create-fieldtype.client.view.html"}).state("viewFieldtype",{url:"/fieldtypes/:fieldtypeId",templateUrl:"modules/fieldtypes/views/view-fieldtype.client.view.html"}).state("editFieldtype",{url:"/fieldtypes/:fieldtypeId/edit",templateUrl:"modules/fieldtypes/views/edit-fieldtype.client.view.html"})}]),angular.module("fieldtypes").controller("FieldtypesController",["$scope","$stateParams","$location","Authentication","Fieldtypes",function($scope,$stateParams,$location,Authentication,Fieldtypes){$scope.authentication=Authentication,$scope.types=["String","Integer","Boolean","Date"],$scope.create=function(){var fieldtype=new Fieldtypes({name:this.name,description:this.description,type:this.type});fieldtype.$save(function(response){$location.path("fieldtypes/"+response._id),$scope.name="",$scope.description="",$scope.type=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(fieldtype){if(fieldtype){fieldtype.$remove();for(var i in $scope.fieldtypes)$scope.fieldtypes[i]===fieldtype&&$scope.fieldtypes.splice(i,1)}else $scope.fieldtype.$remove(function(){$location.path("fieldtypes")})},$scope.update=function(){var fieldtype=$scope.fieldtype;fieldtype.$update(function(){$location.path("fieldtypes/"+fieldtype._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.fieldtypes=Fieldtypes.query()},$scope.findOne=function(){$scope.fieldtype=Fieldtypes.get({fieldtypeId:$stateParams.fieldtypeId})}}]),angular.module("fieldtypes").factory("Fieldtypes",["$resource",function($resource){return $resource("fieldtypes/:fieldtypeId",{fieldtypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("graphtypes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Graphtypes","graphtypes","dropdown","/graphtypes(/create)?",!1,["admin"]),Menus.addSubMenuItem("topbar","graphtypes","List Graphtypes","graphtypes"),Menus.addSubMenuItem("topbar","graphtypes","New Graphtype","graphtypes/create")}]),angular.module("graphtypes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGraphtypes",{url:"/graphtypes",templateUrl:"modules/graphtypes/views/list-graphtypes.client.view.html"}).state("createGraphtype",{url:"/graphtypes/create",templateUrl:"modules/graphtypes/views/create-graphtype.client.view.html"}).state("viewGraphtype",{url:"/graphtypes/:graphtypeId",templateUrl:"modules/graphtypes/views/view-graphtype.client.view.html"}).state("editGraphtype",{url:"/graphtypes/:graphtypeId/edit",templateUrl:"modules/graphtypes/views/edit-graphtype.client.view.html"})}]),angular.module("graphtypes").controller("GraphtypesController",["$scope","$stateParams","$location","Authentication","Graphtypes",function($scope,$stateParams,$location,Authentication,Graphtypes){$scope.authentication=Authentication,$scope.create=function(){var graphtype=new Graphtypes({name:this.name,script:this.script});graphtype.$save(function(response){$location.path("graphtypes/"+response._id),$scope.name="",$scope.script=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(graphtype){if(graphtype){graphtype.$remove();for(var i in $scope.graphtypes)$scope.graphtypes[i]===graphtype&&$scope.graphtypes.splice(i,1)}else $scope.graphtype.$remove(function(){$location.path("graphtypes")})},$scope.update=function(){var graphtype=$scope.graphtype;graphtype.$update(function(){$location.path("graphtypes/"+graphtype._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.graphtypes=Graphtypes.query()},$scope.findOne=function(){$scope.graphtype=Graphtypes.get({graphtypeId:$stateParams.graphtypeId})}}]),angular.module("graphtypes").factory("Graphtypes",["$resource",function($resource){return $resource("graphtypes/:graphtypeId",{graphtypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("jobtypes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Jobtypes","jobtypes","dropdown","/jobtypes(/create)?",!1,["admin"]),Menus.addSubMenuItem("topbar","jobtypes","List Jobtypes","jobtypes"),Menus.addSubMenuItem("topbar","jobtypes","New Jobtype","jobtypes/create")}]),angular.module("jobtypes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listJobtypes",{url:"/jobtypes",templateUrl:"modules/jobtypes/views/list-jobtypes.client.view.html"}).state("createJobtype",{url:"/jobtypes/create",templateUrl:"modules/jobtypes/views/create-jobtype.client.view.html"}).state("viewJobtype",{url:"/jobtypes/:jobtypeId",templateUrl:"modules/jobtypes/views/view-jobtype.client.view.html"}).state("editJobtype",{url:"/jobtypes/:jobtypeId/edit",templateUrl:"modules/jobtypes/views/edit-jobtype.client.view.html"})}]),angular.module("jobtypes").controller("JobtypesController",["$scope","$stateParams","$location","Authentication","Jobtypes","Fieldtypes","Graphtypes",function($scope,$stateParams,$location,Authentication,Jobtypes,Fieldtypes,Graphtypes){$scope.authentication=Authentication,$scope.fieldtypes=Fieldtypes.query(),$scope.graphtypes=Graphtypes.query(),$scope.init=function(){$scope.jobtype={},$scope.jobtype.fields=[],$scope.jobtype.graphs=[]},$scope.removeFromFields=function(){$scope.jobtype.fields.splice(this.$index,1)},$scope.addToFields=function(){$scope.jobtype.fields.push($scope.myFieldtype)},$scope.removeFromGraphs=function(){$scope.jobtype.graphs.splice(this.$index,1)},$scope.addToGraphs=function(){$scope.jobtype.graphs.push($scope.myGraphtype)},$scope.create=function(){var jobtype=new Jobtypes({name:this.name,address:this.address,fields:this.jobtype.fields,graphs:this.jobtype.graphs,queryPattern:this.queryPattern});jobtype.$save(function(response){$location.path("jobtypes/"+response._id),$scope.name="",$scope.address="",$scope.queryPattern="",$scope.jobtype.fields=[],$scope.jobtype.graphs=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(jobtype){if(jobtype){jobtype.$remove();for(var i in $scope.jobtypes)$scope.jobtypes[i]===jobtype&&$scope.jobtypes.splice(i,1)}else $scope.jobtype.$remove(function(){$location.path("jobtypes")})},$scope.update=function(){var jobtype=$scope.jobtype;jobtype.$update(function(){$location.path("jobtypes/"+jobtype._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.jobtypes=Jobtypes.query()},$scope.findOne=function(){$scope.jobtype=Jobtypes.get({jobtypeId:$stateParams.jobtypeId})}}]),angular.module("jobtypes").factory("Jobtypes",["$resource",function($resource){return $resource("jobtypes/:jobtypeId",{jobtypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("queries").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Queries","queries","dropdown","/queries(/create)?"),Menus.addSubMenuItem("topbar","queries","List Queries","queries"),Menus.addSubMenuItem("topbar","queries","New Query","queries/create")}]),angular.module("queries").config(["$stateProvider",function($stateProvider){$stateProvider.state("listQueries",{url:"/queries",templateUrl:"modules/queries/views/list-queries.client.view.html"}).state("createQuery",{url:"/queries/create",templateUrl:"modules/queries/views/create-query.client.view.html"}).state("viewQuery",{url:"/queries/:queryId",templateUrl:"modules/queries/views/view-query.client.view.html"}).state("editQuery",{url:"/queries/:queryId/edit",templateUrl:"modules/queries/views/edit-query.client.view.html"})}]),angular.module("queries").controller("QueriesController",["$scope","$stateParams","$location","Authentication","Queries","Jobtypes",function($scope,$stateParams,$location,Authentication,Queries,Jobtypes){$scope.authentication=Authentication,$scope.jobtypes=Jobtypes.query(),$scope.init=function(){$scope.query={},$scope.query.fields=[]},$scope.create=function(){var query=new Queries({name:this.name,job:this.myJobtype,fields:this.query.fields});query.$save(function(response){$location.path("queries/"+response._id),$scope.name="",$scope.myJobtype={},$scope.fields=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(query){if(query){query.$remove();for(var i in $scope.queries)$scope.queries[i]===query&&$scope.queries.splice(i,1)}else $scope.query.$remove(function(){$location.path("queries")})},$scope.update=function(){var query=$scope.query;query.$update(function(){$location.path("queries/"+query._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.queries=Queries.query()},$scope.findOne=function(){$scope.query=Queries.get({queryId:$stateParams.queryId})},$scope.jobChange=function(){$scope.query.fields=[]},$scope.graphChange=function(){$scope.myGraph=this.myGraphType;var graphScript=angular.element(document.querySelector("#graphScript"));graphScript.remove();var svgDiv=angular.element(document.querySelector("#svgDiv"));svgDiv.children().remove();var script=document.createElement("script");script.type="text/javascript",script.src=$scope.myGraph.script,script.id="graphScript";var scriptDiv=angular.element(document.querySelector("#scriptDiv"));scriptDiv.append(script)}}]),angular.module("queries").factory("Queries",["$resource",function($resource){return $resource("queries/:queryId",{queryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);